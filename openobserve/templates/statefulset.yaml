apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "openobserve.fullname" . }}
  labels:
    {{- include "openobserve.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "openobserve.fullname" . }}
  replicas: 1
  selector:
    matchLabels:
       {{- include "openobserve.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "openobserve.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "openobserve.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      # terminationGracePeriodSeconds: 0
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: ZO_ROOT_USER_EMAIL
              value: {{ .Values.auth.rootUserEmail }}
            - name: ZO_ROOT_USER_PASSWORD
              valueFrom:
                  secretKeyRef:
                    name: initial-root-password
                    key: password
            - name: ZO_DATA_DIR
              value: {{ .Values.storage.dataDir }}
            {{- range $name, $item := .Values.config }}
            - name: {{ $name }}
              value: {{ $item }}
            {{- end }}
          # command: ["/bin/bash", "-c", "while true; do sleep 1; done"]
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          livenessProbe:
            httpGet:
              path: /web/
              port: 5080
            initialDelaySeconds: 5
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /web/
              port: 5080
            initialDelaySeconds: 3
            periodSeconds: 3
          ports:
            - containerPort: 5080
              name: http
          volumeMounts:
          - name: data
            mountPath: /data
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
        - ReadWriteOnce
      {{- if .Values.storage.storageClassName }}
      storageClassName: {{ .Values.storage.storageClassName }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.storage.volumeSize }}
